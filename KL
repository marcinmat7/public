

###### losujemy)punkty


x <- FP_1(runif(n = 1000000, min = 0, max = 1))
y <- FQ_1(runif(n = 1000000, min = 0, max = 1))


### Buckety:

    buckets <- quantile(x = x, probs = 0:7/10)
    x_buckets <- table(cut(x, buckets, include.lowest = TRUE, right = FALSE, labels = NULL))
    x_buckets <- x_buckets / sum(x_buckets)
    y_buckets <- table(cut(y, buckets, include.lowest = TRUE, right = FALSE, labels = NULL))
    y_buckets <- y_buckets / sum(y_buckets)
    
    psi_bucket <- sum((x_buckets - y_buckets) * log(x_buckets / y_buckets, base = exp(1)))
    
# KDE
    
    range_common <- range(c(1, 3))
    grid_points <- 100000
    
    # KDE z ustalonym zakresem i liczbą punktów
    dens_x <- density(x, from = range_common[1], to = range_common[2], n = grid_points)
    dens_y <- density(y, from = range_common[1], to = range_common[2], n = grid_points)
    
    # Oś X (wspólna)
    dx <- dens_x$x
    
    # Krok między punktami
    delta <- dx[2] - dx[1]
    
    # Wartości gęstości
    px <- dens_x$y
    qy <- dens_y$y
    
    # Normalizacja funkcji gęstości do całki 1
    px <- px / sum(px * delta)
    qy <- qy / sum(qy * delta)
    
    # Stabilizacja: unikamy log(0)
    epsilon <- 1e-10
    px <- pmax(px, epsilon)
    qy <- pmax(qy, epsilon)
    
    # Obliczenie KL-divergencji: KL(P || Q) i KL(Q || P)
    kl_pq <- sum(px * log(px / qy)) * delta
    kl_qp <- sum(qy * log(qy / px)) * delta
    
    # Symetryczna dywergencja KL
    kl_sym <- kl_pq + kl_qp
    # kl_sym
    
    print(psi_bucket)
    print(kl_sym)
